{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst startButton = document.querySelector('button');\nconst input = document.querySelector('#datetime-picker');\n\nlet userSelectedDate;\nlet updateCounter; \n\nstartButton.disabled = true;\n\nflatpickr('#datetime-picker', {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose: function (selectedDates) {\n    userSelectedDate = selectedDates[0];\n    const currentDate = new Date();\n    if (userSelectedDate > currentDate) {\n      startButton.disabled = false;\n    } else {\n      startButton.disabled = true;\n      iziToast.show({\n        title: 'Error',\n        message: 'Please choose a date in the future!',\n        position: 'topRight',\n        backgroundColor: '#ef4040',\n        messageColor: '#fff',\n        titleColor: '#fff',\n      });\n    }\n  },\n});\n\nstartButton.addEventListener('click', () => {\n  if (startButton.disabled === false) {\n    updateCounter = setInterval(updateDisplay, 1000);\n    startButton.disabled = true;\n    input.readOnly = true;\n  }\n});\n\nfunction updateDisplay() {\n  const currentDate = new Date();\n  const remainingTime = userSelectedDate - currentDate;\n\n  if (remainingTime <= 0) {\n    clearInterval(updateCounter);\n    return;\n  }\n  const { days, hours, minutes, seconds } = convertMs(remainingTime);\n  const formatTimerValue = (value) => String(value).padStart(2, '0');\n\n  document.querySelector('[data-days]').textContent = formatTimerValue(days);\n  document.querySelector('[data-hours]').textContent = formatTimerValue(hours);\n  document.querySelector('[data-minutes]').textContent = formatTimerValue(minutes);\n  document.querySelector('[data-seconds]').textContent = formatTimerValue(seconds);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}"],"names":["startButton","input","userSelectedDate","updateCounter","flatpickr","selectedDates","iziToast","updateDisplay","remainingTime","days","hours","minutes","seconds","convertMs","formatTimerValue","value","ms"],"mappings":"2GAKA,MAAMA,EAAc,SAAS,cAAc,QAAQ,EAC7CC,EAAQ,SAAS,cAAc,kBAAkB,EAEvD,IAAIC,EACAC,EAEJH,EAAY,SAAW,GAEvBI,EAAU,mBAAoB,CAC5B,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAS,SAAUC,EAAe,CAChCH,EAAmBG,EAAc,CAAC,EAE9BH,EADgB,IAAI,KAEtBF,EAAY,SAAW,IAEvBA,EAAY,SAAW,GACvBM,EAAS,KAAK,CACZ,MAAO,QACP,QAAS,sCACT,SAAU,WACV,gBAAiB,UACjB,aAAc,OACd,WAAY,MACpB,CAAO,EAEJ,CACH,CAAC,EAEDN,EAAY,iBAAiB,QAAS,IAAM,CACtCA,EAAY,WAAa,KAC3BG,EAAgB,YAAYI,EAAe,GAAI,EAC/CP,EAAY,SAAW,GACvBC,EAAM,SAAW,GAErB,CAAC,EAED,SAASM,GAAgB,CAEvB,MAAMC,EAAgBN,EADF,IAAI,KAGxB,GAAIM,GAAiB,EAAG,CACtB,cAAcL,CAAa,EAC3B,MACD,CACD,KAAM,CAAE,KAAAM,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAa,EAC3DM,EAAoBC,GAAU,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,EAEjE,SAAS,cAAc,aAAa,EAAE,YAAcD,EAAiBL,CAAI,EACzE,SAAS,cAAc,cAAc,EAAE,YAAcK,EAAiBJ,CAAK,EAC3E,SAAS,cAAc,gBAAgB,EAAE,YAAcI,EAAiBH,CAAO,EAC/E,SAAS,cAAc,gBAAgB,EAAE,YAAcG,EAAiBF,CAAO,CACjF,CAEA,SAASC,EAAUG,EAAI,CAMrB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAC1BN,EAAQ,KAAK,MAAOM,EAAK,MAAO,IAAI,EACpCL,EAAU,KAAK,MAAQK,EAAK,MAAO,KAAQ,GAAM,EACjDJ,EAAU,KAAK,MAASI,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}